name: Build Docker Images and Upload Artifact

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    paths:
      - 'docker/Dockerfile.base'       # Trigger when Dockerfile.base changes
      - 'docker/Dockerfile.packages'   # Trigger when Dockerfile.packages changes
      - 'src/**'                        # Trigger when any file in the src folder changes

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Set up Docker cache
      - name: Set up Docker cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Step 4: Build base image if Dockerfile.base has changed
      - name: Build base image
        if: github.event.head_commit.changed_files | contains('docker/Dockerfile.base')
        run: |
          docker buildx build --cache-from=type=local,source=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --tag rosbot-base:latest -f docker/Dockerfile.base .

      # Step 5: Build packages image if Dockerfile.packages has changed
      - name: Build packages image
        if: github.event.head_commit.changed_files | contains('docker/Dockerfile.packages')
        run: |
          docker buildx build --cache-from=type=local,source=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --tag rosbot-packages:latest -f docker/Dockerfile.packages .

      # Step 6: Build local image if src changes
      - name: Build local image
        if: github.event.head_commit.changed_files | contains('src/')
        run: |
          docker buildx build --cache-from=type=local,source=/tmp/.buildx-cache --cache-to=type=local,dest=/tmp/.buildx-cache --tag rosbot-local:latest -f docker/Dockerfile.local .

      # Step 7: Save rosbot-local image as tarball
      - name: Save rosbot-local image as tarball
        run: |
          docker save rosbot-local:latest -o rosbot-local.tar

      # Step 8: Upload rosbot-local.tar as an artifact
      - name: Upload rosbot-local.tar as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: rosbot-local
          path: rosbot-local.tar
